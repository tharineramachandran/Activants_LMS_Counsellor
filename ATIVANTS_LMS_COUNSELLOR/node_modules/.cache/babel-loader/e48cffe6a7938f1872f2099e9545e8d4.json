{"ast":null,"code":"var _jsxFileName = \"E:\\\\ShawMovieWebsite\\\\shaw-website\\\\src\\\\NetflixRemastered\\\\containers\\\\Documentaries.js\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from \"redux\";\nimport { connect } from 'react-redux';\nimport { getMovieRows } from '../getMovie';\nimport { fetchDocumentaries } from '../store/actions/index';\n\nclass Documentaries extends Component {\n  componentWillMount() {\n    this.props.fetchDocumentaries();\n  }\n\n  render() {\n    let movies; // Call getMoviesRows function only when we get the data back \n    // from the API through redux \n\n    if (this.props.movies.data) {\n      const url = '/discover/tv?api_key=224ce27b38a3805ecf6f6c36eb3ba9d0&with_genres=99';\n      movies = getMovieRows(this.props.movies.data, url);\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"movieShowcase__heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }, \"Documentaries\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"movieShowcase__container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }\n    }, movies));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    movies: state.documentary\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    fetchDocumentaries\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Documentaries);","map":{"version":3,"sources":["E:/ShawMovieWebsite/shaw-website/src/NetflixRemastered/containers/Documentaries.js"],"names":["React","Component","bindActionCreators","connect","getMovieRows","fetchDocumentaries","Documentaries","componentWillMount","props","render","movies","data","url","mapStateToProps","state","documentary","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,YAAT,QAA6B,aAA7B;AACA,SAASC,kBAAT,QAAmC,wBAAnC;;AAEA,MAAMC,aAAN,SAA4BL,SAA5B,CAAsC;AAEpCM,EAAAA,kBAAkB,GAAG;AACnB,SAAKC,KAAL,CAAWH,kBAAX;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACP,QAAIC,MAAJ,CADO,CAEP;AACA;;AACA,QAAI,KAAKF,KAAL,CAAWE,MAAX,CAAkBC,IAAtB,EAA4B;AAC1B,YAAMC,GAAG,GAAG,sEAAZ;AACAF,MAAAA,MAAM,GAAGN,YAAY,CAAC,KAAKI,KAAL,CAAWE,MAAX,CAAkBC,IAAnB,EAAyBC,GAAzB,CAArB;AACD;;AACD,wBACE,uDACE;AAAI,MAAA,SAAS,EAAC,wBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,eAEE;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,MADH,CAFF,CADF;AAQD;;AAtBmC;;AA0BtC,MAAMG,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AAAEJ,IAAAA,MAAM,EAAEI,KAAK,CAACC;AAAhB,GAAP;AACD,CAFD;;AAIA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAOf,kBAAkB,CAAC;AAAEG,IAAAA;AAAF,GAAD,EAAyBY,QAAzB,CAAzB;AACD,CAFD;;AAIA,eAAed,OAAO,CAACU,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CV,aAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from \"redux\";\nimport { connect } from 'react-redux';\n\nimport { getMovieRows } from '../getMovie';\nimport { fetchDocumentaries } from '../store/actions/index';\n\nclass Documentaries extends Component {\n\n  componentWillMount() {\n    this.props.fetchDocumentaries();\n  }\n\n  render() {\n    let movies\n    // Call getMoviesRows function only when we get the data back \n    // from the API through redux \n    if (this.props.movies.data) {\n      const url = '/discover/tv?api_key=224ce27b38a3805ecf6f6c36eb3ba9d0&with_genres=99';\n      movies = getMovieRows(this.props.movies.data, url);\n    }\n    return (\n      <>\n        <h1 className=\"movieShowcase__heading\">Documentaries</h1>\n        <div className=\"movieShowcase__container\">\n          {movies}\n        </div>\n      </>\n    )\n  }\n}\n\n\nconst mapStateToProps = (state) => {\n  return { movies: state.documentary }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators({ fetchDocumentaries }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Documentaries);"]},"metadata":{},"sourceType":"module"}