{"ast":null,"code":"var _jsxFileName = \"E:\\\\ShawMovieWebsite\\\\shaw-website\\\\src\\\\Store\\\\_Redux.js\";\nimport React, { useReducer, useEffect, useState } from 'react';\nimport _AxiosInstance from '../Store/_AxiosInstance';\nimport DisplayAllGeresOfMovies from '../Containers/DisplayAllGeresOfMovies';\nimport { Grid, Image } from 'semantic-ui-react';\nimport SearchGenresResult from '../Containers/SearchGenresResult';\nconst initState = {\n  movieList: []\n};\n\nconst reducder = (prevState, action) => {\n  switch (action.type) {\n    case 'FETCH_TRENDING':\n      return {\n        movieList: action.payload.data.results\n      };\n\n    case 'FETCH_HORROW':\n      return {\n        movieList: action.payload.data.results\n      };\n\n    default:\n      return prevState;\n  }\n};\n\nconst _Redux = props => {\n  const [stateTrending, dispatchTrending] = useReducer(reducder, initState);\n  const [seletedGenreMovieId, setSeletedGenreMovieId] = useState({\n    type: '',\n    id: '',\n    name: ''\n  });\n  const [movie, setMovie] = useState([]);\n  const [value, setValue] = useState(false);\n  useEffect(() => {\n    _AxiosInstance.get(props.url).then(data => {\n      dispatchTrending({\n        type: props.FetchType,\n        payload: data\n      });\n    }).catch(err => {});\n  }, []);\n\n  const selectedMovie = movie => {\n    setSeletedGenreMovieId({\n      id: movie.id,\n      type: movie.media_type,\n      name: movie.title || movie.name\n    });\n    setValue(true);\n  };\n\n  useEffect(() => {\n    let movies = stateTrending.movieList.map(movie => {\n      let movieImageUrl = 'https://image.tmdb.org/t/p/w500/' + movie.id;\n\n      if (movieImageUrl !== null) {\n        const movieComponent = /*#__PURE__*/React.createElement(DisplayAllGeresOfMovies, {\n          movieDetials: () => selectedMovie(movie),\n          key: movie.id,\n          movie: movie,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 21\n          }\n        });\n        return movieComponent;\n      }\n    });\n    setMovie(movies);\n  }, [stateTrending.movieList]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    padded: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    className: \"scrollmenuImageBigger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, movie))), value ? /*#__PURE__*/React.createElement(SearchGenresResult, {\n    Ids: seletedGenreMovieId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 22\n    }\n  }) : \" \");\n};\n\nexport default _Redux;","map":{"version":3,"sources":["E:/ShawMovieWebsite/shaw-website/src/Store/_Redux.js"],"names":["React","useReducer","useEffect","useState","_AxiosInstance","DisplayAllGeresOfMovies","Grid","Image","SearchGenresResult","initState","movieList","reducder","prevState","action","type","payload","data","results","_Redux","props","stateTrending","dispatchTrending","seletedGenreMovieId","setSeletedGenreMovieId","id","name","movie","setMovie","value","setValue","get","url","then","FetchType","catch","err","selectedMovie","media_type","title","movies","map","movieImageUrl","movieComponent"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect, useState } from 'react';\r\nimport _AxiosInstance from '../Store/_AxiosInstance'\r\nimport DisplayAllGeresOfMovies from '../Containers/DisplayAllGeresOfMovies';\r\nimport { Grid, Image } from 'semantic-ui-react'\r\nimport SearchGenresResult from '../Containers/SearchGenresResult'\r\n\r\n\r\n\r\nconst initState = {\r\n    movieList: [],\r\n}\r\n\r\nconst reducder = (prevState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_TRENDING':\r\n            return {\r\n                movieList: action.payload.data.results,\r\n            };\r\n\r\n        case 'FETCH_HORROW':\r\n            return {\r\n                movieList: action.payload.data.results,\r\n            };\r\n\r\n        default:\r\n            return prevState;\r\n    }\r\n}\r\n\r\nconst _Redux = props => {\r\n\r\n    const [stateTrending, dispatchTrending] = useReducer(reducder, initState);\r\n    const [seletedGenreMovieId, setSeletedGenreMovieId] = useState({type:'',id:'', name:''});\r\n    const [movie, setMovie] = useState([]);\r\n    const [value, setValue] = useState(false);\r\n\r\n    useEffect(() => {\r\n        _AxiosInstance.get(props.url)\r\n            .then(data => {\r\n                dispatchTrending({ type: props.FetchType, payload: data })\r\n            })\r\n            .catch(err => {\r\n\r\n            })\r\n    }, []);\r\n\r\n    const selectedMovie = movie => {\r\n        setSeletedGenreMovieId({\r\n            id : movie.id,\r\n            type : movie.media_type,\r\n            name : movie.title || movie.name\r\n        });\r\n        setValue(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let movies = stateTrending.movieList.map((movie) => {\r\n            let movieImageUrl = 'https://image.tmdb.org/t/p/w500/' + movie.id;\r\n\r\n            if (movieImageUrl !== null) {\r\n                const movieComponent = (\r\n                    <DisplayAllGeresOfMovies\r\n                        movieDetials={() => selectedMovie(movie)}\r\n                        key={movie.id}\r\n                        movie={movie}\r\n                    />\r\n                );\r\n                return movieComponent;\r\n            }\r\n        });\r\n\r\n        setMovie(movies);\r\n\r\n    }, [stateTrending.movieList]);\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Grid padded>\r\n                <Grid.Row>\r\n                    <Grid.Column className=\"scrollmenuImageBigger\">\r\n                        {movie}\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n            {value ? <SearchGenresResult Ids={seletedGenreMovieId} /> : \" \"}\r\n        </React.Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default _Redux;"]},"metadata":{},"sourceType":"module"}