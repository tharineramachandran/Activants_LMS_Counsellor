{"ast":null,"code":"var _jsxFileName = \"E:\\\\ShawMovieWebsite\\\\shaw-website\\\\src\\\\HeaderSegement\\\\Explore\\\\MovieInfo.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Header, Icon, Segment, Grid, Modal, Button, Embed, Image } from 'semantic-ui-react';\nimport ImageOfRolePlayers from '../../../src/HeaderSegement/Explore/ImageOfRolePlayers';\nimport ReactPlayer from 'react-player';\n\nconst MovieInfo = props => {\n  const [open, setOpen] = useState(false);\n  const [dimmer, setDimmer] = useState('');\n  const [url, setUrl] = useState(props.url);\n  const [bgColor, setBgColor] = useState('#000000');\n  const [width, setWidth] = useState(window.innerWidth);\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n\n    window.addEventListener('resize', handleResize);\n    if (width < 1000) setBgColor('#111111');else setBgColor('#000000');\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  });\n\n  const show = dimmer => {\n    setDimmer(dimmer);\n    setOpen(true);\n  };\n\n  const close = () => {\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    trigger: /*#__PURE__*/React.createElement(Button, {\n      icon: true,\n      labelPosition: \"left\",\n      style: {\n        backgroundColor: `${bgColor}`\n      },\n      onClick: () => show('blurring'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: \"play\",\n      color: \"green\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }\n    }, \"Play\")),\n    dimmer: dimmer,\n    open: open,\n    onClose: () => close(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Content, {\n    image: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Description, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }\n  }, \"This is an example of expanded content that will cause the modal's dimmer to scroll\"), /*#__PURE__*/React.createElement(Image, {\n    src: \"/images/wireframe/paragraph.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Image, {\n    src: \"/images/wireframe/paragraph.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Image, {\n    src: \"/images/wireframe/paragraph.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Image, {\n    src: \"/images/wireframe/paragraph.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Image, {\n    src: \"/images/wireframe/paragraph.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Image, {\n    src: \"/images/wireframe/paragraph.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Image, {\n    src: \"/images/wireframe/paragraph.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Image, {\n    src: \"/images/wireframe/paragraph.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Modal.Actions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    positive: true,\n    icon: \"checkmark\",\n    labelPosition: \"right\",\n    content: \"Ok\",\n    onClick: () => close(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default MovieInfo;","map":{"version":3,"sources":["E:/ShawMovieWebsite/shaw-website/src/HeaderSegement/Explore/MovieInfo.jsx"],"names":["React","useState","useEffect","Header","Icon","Segment","Grid","Modal","Button","Embed","Image","ImageOfRolePlayers","ReactPlayer","MovieInfo","props","open","setOpen","dimmer","setDimmer","url","setUrl","bgColor","setBgColor","width","setWidth","window","innerWidth","handleResize","addEventListener","removeEventListener","show","close","backgroundColor","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Header, Icon, Segment, Grid, Modal, Button, Embed, Image } from 'semantic-ui-react';\r\nimport ImageOfRolePlayers from '../../../src/HeaderSegement/Explore/ImageOfRolePlayers';\r\nimport ReactPlayer from 'react-player'\r\n\r\n\r\nconst MovieInfo = (props) => {\r\n    const [open, setOpen] = useState(false);\r\n    const [dimmer, setDimmer] = useState('');\r\n    const [url, setUrl] = useState(props.url);\r\n    const [bgColor, setBgColor] = useState('#000000');\r\n    const [width, setWidth] = useState(window.innerWidth);\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => setWidth(window.innerWidth);\r\n        window.addEventListener('resize', handleResize);\r\n        if (width < 1000)\r\n            setBgColor('#111111')\r\n        else\r\n            setBgColor('#000000')\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n    });\r\n\r\n\r\n    const show = (dimmer) => {\r\n        setDimmer(dimmer);\r\n        setOpen(true);\r\n    }\r\n\r\n    const close = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Modal trigger={\r\n                <Button icon labelPosition='left' style={{ backgroundColor: `${bgColor}` }} onClick={() => show('blurring')}>\r\n                    <Icon name='play' color='green' />\r\n                    <span style={{ color: 'white' }}>Play\r\n                    </span>\r\n                </Button>} dimmer={dimmer} open={open} onClose={() => close()}>\r\n                {/* <Modal.Content image>\r\n                    <Segment color='transparent' inverted>\r\n                        <ReactPlayer url={url}\r\n                            playing\r\n                            loop\r\n                            width='100%'\r\n                            controls\r\n                        />\r\n                        <Grid>\r\n                            <Grid.Column width={16}>\r\n                                <ImageOfRolePlayers />\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Segment>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button\r\n                        positive\r\n                        icon='checkmark'\r\n                        labelPosition='right'\r\n                        content=\"Ok\"\r\n                        onClick={() => close()}\r\n                    />\r\n                </Modal.Actions>\r\n            </Modal> */}\r\n                <Modal.Content image>\r\n                    <Modal.Description>\r\n                        <p>\r\n                            This is an example of expanded content that will cause the modal's\r\n                            dimmer to scroll\r\n                        </p>\r\n                        <Image src='/images/wireframe/paragraph.png' />\r\n                        <Image src='/images/wireframe/paragraph.png' />\r\n                        <Image src='/images/wireframe/paragraph.png' />\r\n                        <Image src='/images/wireframe/paragraph.png' />\r\n                        <Image src='/images/wireframe/paragraph.png' />\r\n                        <Image src='/images/wireframe/paragraph.png' />\r\n                        <Image src='/images/wireframe/paragraph.png' />\r\n                        <Image src='/images/wireframe/paragraph.png' />\r\n                    </Modal.Description>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button\r\n                        positive\r\n                        icon='checkmark'\r\n                        labelPosition='right'\r\n                        content=\"Ok\"\r\n                        onClick={() => close()}\r\n                    />\r\n                </Modal.Actions>\r\n            </Modal>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default MovieInfo;"]},"metadata":{},"sourceType":"module"}