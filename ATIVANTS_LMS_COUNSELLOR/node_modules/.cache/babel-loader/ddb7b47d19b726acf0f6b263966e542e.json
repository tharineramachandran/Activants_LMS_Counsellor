{"ast":null,"code":"var _jsxFileName = \"E:\\\\ShawMovieWebsite\\\\shaw-website\\\\src\\\\Containers\\\\SearchGenresResult.js\";\nimport React, { Component, useState, useEffect, useRef } from 'react';\nimport _Header from '../SecondaryComponents/Desktop/_Header';\nimport _NavigationItems from '../SecondaryComponents/Desktop/_NavigationItems';\nimport _MovieGenres from '../SecondaryComponents/Desktop/_MovieGenres';\nimport axios from 'axios';\nimport _SearchMovieList from '../SecondaryComponents/Desktop/_SearchMovieList';\nimport _BrowseCategories from '../SecondaryComponents/Desktop/_BrowseCategories';\nimport _SearchMovieListDisplay from '../SecondaryComponents/Desktop/_SearchMovieListDisplay';\n\nconst SearchGenresResult = ({\n  movieId,\n  type,\n  name\n}) => {\n  const [inputValue, setInputValue] = useState(name);\n  const [movieList, setMovieList] = useState([]);\n  const [movieOverview, setMovieOverview] = useState({});\n  const [value, setValue] = useState(false);\n\n  setTheNewInputValue = e => {\n    setInputValue('');\n    setInputValue(e.target.value);\n  };\n\n  useEffect(() => {\n    const url = `https://api.themoviedb.org/3/search/multi?api_key=028e8ea4ca7d9164d085c9238979098b&language=en-US&include_adult=false&query=${inputValue}`;\n    axios.get(url).then(res => {\n      const results = res.data.results;\n      let movieImageUrl;\n      let movieRows = [];\n      results.forEach(movie => {\n        if (movie.poster_path !== null && movie.media_type !== \"person\") {\n          movieImageUrl = \"https://image.tmdb.org/t/p/w500\" + movie.poster_path;\n          const movieComponent = /*#__PURE__*/React.createElement(_SearchMovieListDisplay, {\n            movieDetials: () => selectMovieHandler(movie),\n            key: movie.id,\n            movieImage: movieImageUrl,\n            movie: movie,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 36\n            }\n          });\n          movieRows.push(movieComponent); // console.log(movie)\n        }\n      });\n      setMovieList(movieRows);\n    }).catch(error => {\n      console.log(\"errror\", error);\n    });\n    return () => {\n      setMovieList([]);\n      console.log(\"cleaned DC\");\n    };\n  }, [inputValue]);\n\n  const Url = x => `https://api.themoviedb.org/3/movie/${x}?api_key=028e8ea4ca7d9164d085c9238979098b&append_to_response=videos`;\n\n  const UrlTv = x => `https://api.themoviedb.org/3/tv/${x}?api_key=028e8ea4ca7d9164d085c9238979098b&append_to_response=videos`;\n\n  const callUrl = url => {\n    axios.get(url).then(res => {\n      const movieData = res.data;\n      setMovieOverview(movieData);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  useEffect(() => {\n    let url;\n    if (type === \"movie\") url = Url(movieId);else if (type === \"tv\") url = UrlTv(movieId);\n    callUrl(url);\n    setValue(true);\n    return () => {\n      movieId = '';\n    };\n  }, [movieId]);\n\n  const selectMovieHandler = movie => {\n    let url;\n    if (movie.media_type === \"movie\") url = Url(movie.id);else if (movie.media_type === \"tv\") url = UrlTv(movie.id);\n    callUrl(url);\n  };\n\n  console.log(\"movie id\", movieId);\n  console.log(movieOverview);\n  console.log(\"value\", value);\n  console.log(\"input value\", inputValue);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, value ? /*#__PURE__*/React.createElement(_SearchMovieList, {\n    movie: movieOverview,\n    listOfMovies: movieList,\n    onSearchHandler: setTheNewInputValue,\n    defName: name,\n    searchInputValue: inputValue,\n    onCloseModal: () => setInputValue(''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 16\n    }\n  }) : \" \", \" */}\");\n};\n\nexport default SearchGenresResult;","map":{"version":3,"sources":["E:/ShawMovieWebsite/shaw-website/src/Containers/SearchGenresResult.js"],"names":["React","Component","useState","useEffect","useRef","_Header","_NavigationItems","_MovieGenres","axios","_SearchMovieList","_BrowseCategories","_SearchMovieListDisplay","SearchGenresResult","movieId","type","name","inputValue","setInputValue","movieList","setMovieList","movieOverview","setMovieOverview","value","setValue","setTheNewInputValue","e","target","url","get","then","res","results","data","movieImageUrl","movieRows","forEach","movie","poster_path","media_type","movieComponent","selectMovieHandler","id","push","catch","error","console","log","Url","x","UrlTv","callUrl","movieData"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect, useRef } from 'react'\r\nimport _Header from '../SecondaryComponents/Desktop/_Header'\r\nimport _NavigationItems from '../SecondaryComponents/Desktop/_NavigationItems'\r\nimport _MovieGenres from '../SecondaryComponents/Desktop/_MovieGenres'\r\nimport axios from 'axios'\r\nimport _SearchMovieList from '../SecondaryComponents/Desktop/_SearchMovieList'\r\nimport _BrowseCategories from '../SecondaryComponents/Desktop/_BrowseCategories'\r\nimport _SearchMovieListDisplay from '../SecondaryComponents/Desktop/_SearchMovieListDisplay'\r\n\r\nconst SearchGenresResult = ({ movieId, type, name }) => {\r\n\r\n  const [inputValue, setInputValue] = useState(name);\r\n  const [movieList, setMovieList] = useState([]);\r\n  const [movieOverview, setMovieOverview] = useState({});\r\n  const [value, setValue] = useState(false);\r\n\r\n  setTheNewInputValue = e => {\r\n      setInputValue('');\r\n      setInputValue(e.target.value);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const url = `https://api.themoviedb.org/3/search/multi?api_key=028e8ea4ca7d9164d085c9238979098b&language=en-US&include_adult=false&query=${inputValue}`;\r\n    axios.get(url)\r\n      .then(res => {\r\n        const results = res.data.results;\r\n        let movieImageUrl;\r\n        let movieRows = [];\r\n\r\n        results.forEach((movie) => {\r\n          if (movie.poster_path !== null && movie.media_type !== \"person\") {\r\n            movieImageUrl = \"https://image.tmdb.org/t/p/w500\" + movie.poster_path;\r\n\r\n            const movieComponent = <_SearchMovieListDisplay\r\n              movieDetials={() => selectMovieHandler(movie)}\r\n              key={movie.id}\r\n              movieImage={movieImageUrl}\r\n              movie={movie}\r\n            />\r\n            movieRows.push(movieComponent);\r\n            // console.log(movie)\r\n          }\r\n        })\r\n\r\n        setMovieList(movieRows);\r\n\r\n      }).catch(error => {\r\n        console.log(\"errror\", error);\r\n      });\r\n\r\n    return () => {\r\n      setMovieList([]);\r\n      console.log(\"cleaned DC\")\r\n    }\r\n\r\n  }, [inputValue]);\r\n\r\n\r\n  const Url = x => `https://api.themoviedb.org/3/movie/${x}?api_key=028e8ea4ca7d9164d085c9238979098b&append_to_response=videos`;\r\n  const UrlTv = x => `https://api.themoviedb.org/3/tv/${x}?api_key=028e8ea4ca7d9164d085c9238979098b&append_to_response=videos`;\r\n\r\n\r\n  const callUrl = url => {\r\n    axios.get(url)\r\n      .then(res => {\r\n        const movieData = res.data;\r\n        setMovieOverview(movieData);\r\n\r\n      }).catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    let url;\r\n    if (type === \"movie\")\r\n      url = Url(movieId)\r\n\r\n    else if (type === \"tv\")\r\n      url = UrlTv(movieId)\r\n\r\n    callUrl(url);\r\n    setValue(true);\r\n\r\n    return () => {\r\n      movieId = ''\r\n    }\r\n\r\n  }, [movieId]);\r\n\r\n  const selectMovieHandler = movie => {\r\n    let url;\r\n    if (movie.media_type === \"movie\")\r\n      url = Url(movie.id)\r\n\r\n    else if (movie.media_type === \"tv\")\r\n      url = UrlTv(movie.id)\r\n\r\n    callUrl(url);\r\n  }\r\n\r\n  console.log(\"movie id\", movieId)\r\n  console.log(movieOverview)\r\n  console.log(\"value\", value);\r\n  console.log(\"input value\", inputValue);\r\n\r\n  return (\r\n    <div>\r\n      {value ? <_SearchMovieList movie={movieOverview} listOfMovies={movieList} onSearchHandler={setTheNewInputValue} defName={name} searchInputValue={inputValue} onCloseModal={() => setInputValue('')} /> : \" \"} */}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default SearchGenresResult;"]},"metadata":{},"sourceType":"module"}