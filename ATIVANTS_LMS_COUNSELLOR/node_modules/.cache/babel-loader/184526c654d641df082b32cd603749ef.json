{"ast":null,"code":"var _jsxFileName = \"E:\\\\ShawMovieWebsite\\\\shaw-website\\\\src\\\\Store\\\\_Redux.js\";\nimport React, { useReducer, useEffect, useState } from 'react';\nimport axios from 'axios'; // const initStateListOfMovies = {\n//     toggleMovieList: true,\n//     MovieList: [],\n//     toggleModal: false,\n//     movieOverview: {},\n// }\n// const reducer = (prevState, action) => {\n//     switch (action.type) {\n//         case \"success\":\n//             return (\n//                 {\n//                     ...prevState,\n//                     listOfMovies: action.payload\n//                 }\n//             )\n//     }\n// }\n\nconst _Redux = () => {\n  const [toggleMovieList, setToggleMovieList] = useState(true);\n  const [MovieList, setMovieList] = useState([]);\n  const [toggleModal, setToggleModal] = useState(false);\n  const [movieOverview, setMovieOverview] = useState({}); // axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=224ce27b38a3805ecf6f6c36eb3ba9d0&with_genres=28`)\n\n  /** Make API call as soon as the user starts typing.  */\n\n  makeAipCall = searchItem => {\n    const url = `https://api.themoviedb.org/3/search/multi?api_key=9ea839ec7891591994ec0f540b4b199f&language=en-US&include_adult=false&query=${searchItem}`;\n    axios.get(url).then(res => {\n      const results = res.data.results;\n      let movieImageUrl;\n      /** Will hold all our movies Components */\n\n      let movieRows = [];\n      /** Loop through all the movies */\n\n      results.forEach(movie => {\n        /** Manually build our image url and set it on the Movie component. */\n        if (movie.poster_path !== null && movie.media_type !== \"person\") {\n          movieImageUrl = \"https://image.tmdb.org/t/p/w500\" + movie.poster_path;\n          /** Set the movie object to our Movie component */\n\n          const movieComponent = /*#__PURE__*/React.createElement(Movie, {\n            movieDetails: () => this.selectMovieHandler(movie),\n            key: movie.id,\n            movieImage: movieImageUrl,\n            movie: movie,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 36\n            }\n          });\n          /** Push our movie component to our movieRows array */\n\n          movieRows.push(movieComponent);\n        }\n      });\n      /** Set our MovieList array to the movieRows array */\n\n      this.setState({\n        MovieList: movieRows\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const onSearchHandler = event => {\n    setToggleMovieList(false);\n    const userInput = event.target.value;\n    this.makeAipCall(userInput);\n    if (userInput === \"\") setToggleMovieList(true);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: onSearchHandler,\n    type: \"text\",\n    placeholder: \"Title, genres, people\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default _Redux;","map":{"version":3,"sources":["E:/ShawMovieWebsite/shaw-website/src/Store/_Redux.js"],"names":["React","useReducer","useEffect","useState","axios","_Redux","toggleMovieList","setToggleMovieList","MovieList","setMovieList","toggleModal","setToggleModal","movieOverview","setMovieOverview","makeAipCall","searchItem","url","get","then","res","results","data","movieImageUrl","movieRows","forEach","movie","poster_path","media_type","movieComponent","selectMovieHandler","id","push","setState","catch","error","console","log","onSearchHandler","event","userInput","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,MAAM,GAAG,MAAM;AAEjB,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCJ,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,EAAD,CAAlD,CALiB,CAOjB;;AAEA;;AACFW,EAAAA,WAAW,GAAIC,UAAD,IAAgB;AAC5B,UAAMC,GAAG,GAAI,+HAA8HD,UAAW,EAAtJ;AAEAX,IAAAA,KAAK,CAACa,GAAN,CAAUD,GAAV,EACGE,IADH,CACQC,GAAG,IAAI;AACX,YAAMC,OAAO,GAAGD,GAAG,CAACE,IAAJ,CAASD,OAAzB;AACA,UAAIE,aAAJ;AACA;;AACA,UAAIC,SAAS,GAAG,EAAhB;AAEA;;AACAH,MAAAA,OAAO,CAACI,OAAR,CAAiBC,KAAD,IAAW;AACzB;AACA,YAAIA,KAAK,CAACC,WAAN,KAAsB,IAAtB,IAA8BD,KAAK,CAACE,UAAN,KAAqB,QAAvD,EAAiE;AAC/DL,UAAAA,aAAa,GAAG,oCAAoCG,KAAK,CAACC,WAA1D;AAEA;;AACA,gBAAME,cAAc,gBAAG,oBAAC,KAAD;AACrB,YAAA,YAAY,EAAE,MAAM,KAAKC,kBAAL,CAAwBJ,KAAxB,CADC;AAErB,YAAA,GAAG,EAAEA,KAAK,CAACK,EAFU;AAGrB,YAAA,UAAU,EAAER,aAHS;AAIrB,YAAA,KAAK,EAAEG,KAJc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAvB;AAMA;;AACAF,UAAAA,SAAS,CAACQ,IAAV,CAAeH,cAAf;AACD;AACF,OAfD;AAgBA;;AACA,WAAKI,QAAL,CAAc;AAAExB,QAAAA,SAAS,EAAEe;AAAb,OAAd;AACD,KA1BH,EA0BKU,KA1BL,CA0BWC,KAAK,IAAI;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KA5BH;AA6BD,GAhCD;;AAkCE,QAAMG,eAAe,GAAIC,KAAD,IAAW;AAC/B/B,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AAEA,UAAMgC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA/B;AACA,SAAK3B,WAAL,CAAiByB,SAAjB;AAEA,QAAIA,SAAS,KAAK,EAAlB,EACIhC,kBAAkB,CAAC,IAAD,CAAlB;AACP,GARD;;AAWA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACI,IAAA,QAAQ,EAAE8B,eADd;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,WAAW,EAAC,uBAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAQH,CA/DD;;AAiEA,eAAehC,MAAf","sourcesContent":["import React, { useReducer, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n// const initStateListOfMovies = {\r\n//     toggleMovieList: true,\r\n//     MovieList: [],\r\n//     toggleModal: false,\r\n//     movieOverview: {},\r\n// }\r\n\r\n// const reducer = (prevState, action) => {\r\n\r\n//     switch (action.type) {\r\n//         case \"success\":\r\n//             return (\r\n//                 {\r\n//                     ...prevState,\r\n//                     listOfMovies: action.payload\r\n//                 }\r\n//             )\r\n//     }\r\n// }\r\n\r\n\r\nconst _Redux = () => {\r\n\r\n    const [toggleMovieList, setToggleMovieList] = useState(true);\r\n    const [MovieList, setMovieList] = useState([]);\r\n    const [toggleModal, setToggleModal] = useState(false);\r\n    const [movieOverview, setMovieOverview] = useState({});\r\n\r\n    // axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=224ce27b38a3805ecf6f6c36eb3ba9d0&with_genres=28`)\r\n\r\n    /** Make API call as soon as the user starts typing.  */\r\n  makeAipCall = (searchItem) => {\r\n    const url = `https://api.themoviedb.org/3/search/multi?api_key=9ea839ec7891591994ec0f540b4b199f&language=en-US&include_adult=false&query=${searchItem}`;\r\n\r\n    axios.get(url)\r\n      .then(res => {\r\n        const results = res.data.results;\r\n        let movieImageUrl;\r\n        /** Will hold all our movies Components */\r\n        let movieRows = [];\r\n\r\n        /** Loop through all the movies */\r\n        results.forEach((movie) => {\r\n          /** Manually build our image url and set it on the Movie component. */\r\n          if (movie.poster_path !== null && movie.media_type !== \"person\") {\r\n            movieImageUrl = \"https://image.tmdb.org/t/p/w500\" + movie.poster_path;\r\n\r\n            /** Set the movie object to our Movie component */\r\n            const movieComponent = <Movie\r\n              movieDetails={() => this.selectMovieHandler(movie)}\r\n              key={movie.id}\r\n              movieImage={movieImageUrl}\r\n              movie={movie} />\r\n\r\n            /** Push our movie component to our movieRows array */\r\n            movieRows.push(movieComponent);\r\n          }\r\n        })\r\n        /** Set our MovieList array to the movieRows array */\r\n        this.setState({ MovieList: movieRows });\r\n      }).catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n  \r\n    const onSearchHandler = (event) => {\r\n        setToggleMovieList(false);\r\n\r\n        const userInput = event.target.value;\r\n        this.makeAipCall(userInput);\r\n\r\n        if (userInput === \"\")\r\n            setToggleMovieList(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                onChange={onSearchHandler}\r\n                type=\"text\"\r\n                placeholder=\"Title, genres, people\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default _Redux;"]},"metadata":{},"sourceType":"module"}