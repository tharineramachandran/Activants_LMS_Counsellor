{"ast":null,"code":"import _slicedToArray from \"E:\\\\CircuitBreakerShow\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\CircuitBreakerShow\\\\src\\\\Store\\\\_Redux.js\";\n\nimport React, { useReducer, useEffect, useState } from 'react';\nimport _AxiosInstance from '../Store/_AxiosInstance';\nimport DisplayAllGeresOfMovies from '../Containers/DisplayAllGeresOfMovies';\nimport { Grid, Image } from 'semantic-ui-react';\nimport SearchGenresResult from '../Containers/SearchGenresResult';\nvar initState = {\n  movieList: [],\n  typr: ''\n};\n\nvar reducder = function reducder(prevState, action) {\n  switch (action.type) {\n    case 'FETCH_TRENDING':\n      return {\n        movieList: action.payload.data.results\n      };\n\n    case 'FETCH_HORROW_MOVIE':\n      return {\n        movieList: action.payload.data.results\n      };\n\n    default:\n      return prevState;\n  }\n};\n\nvar _Redux = function _Redux(props) {\n  var _useReducer = useReducer(reducder, initState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      stateTrending = _useReducer2[0],\n      dispatchTrending = _useReducer2[1];\n\n  var _useState = useState({\n    type: '',\n    id: '',\n    name: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      seletedGenreMovieId = _useState2[0],\n      setSeletedGenreMovieId = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      movie = _useState4[0],\n      setMovie = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      value = _useState6[0],\n      setValue = _useState6[1];\n\n  useEffect(function () {\n    _AxiosInstance.get(props.url).then(function (data) {\n      console.log(data);\n      dispatchTrending({\n        type: props.FetchType,\n        payload: data\n      });\n    }).catch(function (err) {});\n  }, []);\n\n  var selectedMovie = function selectedMovie(movie) {\n    setSeletedGenreMovieId({\n      id: movie.id,\n      type: movie.media_type,\n      name: movie.title || movie.name\n    });\n    setValue(true);\n  };\n\n  useEffect(function () {\n    var movies = stateTrending.movieList.map(function (movie) {\n      var movieImageUrl = 'https://image.tmdb.org/t/p/w500/' + movie.id;\n\n      if (movieImageUrl !== null) {\n        var movieComponent = /*#__PURE__*/React.createElement(DisplayAllGeresOfMovies, {\n          movieDetials: function movieDetials() {\n            return selectedMovie(movie);\n          },\n          key: movie.id,\n          movie: movie,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 21\n          }\n        });\n        return movieComponent;\n      }\n    });\n    setMovie(movies);\n  }, [stateTrending.movieList]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    padded: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    className: \"scrollmenuImageBigger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }, movie))), value ? /*#__PURE__*/React.createElement(SearchGenresResult, {\n    Ids: seletedGenreMovieId,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 22\n    }\n  }) : \" \");\n};\n\nexport default _Redux;","map":{"version":3,"sources":["E:/CircuitBreakerShow/src/Store/_Redux.js"],"names":["React","useReducer","useEffect","useState","_AxiosInstance","DisplayAllGeresOfMovies","Grid","Image","SearchGenresResult","initState","movieList","typr","reducder","prevState","action","type","payload","data","results","_Redux","props","stateTrending","dispatchTrending","id","name","seletedGenreMovieId","setSeletedGenreMovieId","movie","setMovie","value","setValue","get","url","then","console","log","FetchType","catch","err","selectedMovie","media_type","title","movies","map","movieImageUrl","movieComponent"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect, useState } from 'react';\r\nimport _AxiosInstance from '../Store/_AxiosInstance'\r\nimport DisplayAllGeresOfMovies from '../Containers/DisplayAllGeresOfMovies';\r\nimport { Grid, Image } from 'semantic-ui-react'\r\nimport SearchGenresResult from '../Containers/SearchGenresResult'\r\n\r\n\r\n\r\nconst initState = {\r\n    movieList: [],\r\n    typr:''\r\n}\r\n\r\nconst reducder = (prevState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_TRENDING':\r\n            return {\r\n                movieList: action.payload.data.results,\r\n            };\r\n\r\n        case 'FETCH_HORROW_MOVIE':\r\n            return {\r\n                movieList: action.payload.data.results,\r\n            };\r\n\r\n        default:\r\n            return prevState;\r\n    }\r\n}\r\n\r\nconst _Redux = props => {\r\n\r\n    const [stateTrending, dispatchTrending] = useReducer(reducder, initState);\r\n    const [seletedGenreMovieId, setSeletedGenreMovieId] = useState({type:'',id:'', name:''});\r\n    const [movie, setMovie] = useState([]);\r\n    const [value, setValue] = useState(false);\r\n\r\n    useEffect(() => {\r\n        _AxiosInstance.get(props.url)\r\n            .then(data => {\r\n                console.log(data)\r\n                dispatchTrending({ type: props.FetchType, payload: data,})\r\n            })\r\n            .catch(err => {\r\n\r\n            })\r\n    }, []);\r\n\r\n    const selectedMovie = movie => {\r\n        setSeletedGenreMovieId({\r\n            id : movie.id,\r\n            type : movie.media_type,\r\n            name : movie.title || movie.name\r\n        });\r\n        setValue(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let movies = stateTrending.movieList.map((movie) => {\r\n            let movieImageUrl = 'https://image.tmdb.org/t/p/w500/' + movie.id;\r\n\r\n            if (movieImageUrl !== null) {\r\n                const movieComponent = (\r\n                    <DisplayAllGeresOfMovies\r\n                        movieDetials={() => selectedMovie(movie)}\r\n                        key={movie.id}\r\n                        movie={movie}\r\n                    />\r\n                );\r\n                return movieComponent;\r\n            }\r\n        });\r\n\r\n        setMovie(movies);\r\n\r\n    }, [stateTrending.movieList]);\r\n    \r\n    \r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Grid padded>\r\n                <Grid.Row>\r\n                    <Grid.Column className=\"scrollmenuImageBigger\">\r\n                        {movie}\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n            {value ? <SearchGenresResult Ids={seletedGenreMovieId} /> : \" \"}\r\n        </React.Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default _Redux;"]},"metadata":{},"sourceType":"module"}