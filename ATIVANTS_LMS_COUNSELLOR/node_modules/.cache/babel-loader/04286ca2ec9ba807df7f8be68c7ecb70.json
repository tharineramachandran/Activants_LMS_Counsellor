{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\ACTIVANTS\\\\Desktop\\\\LMS Councellor\\\\Activants_LMS_Counsellor\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\ACTIVANTS\\\\Desktop\\\\LMS Councellor\\\\Activants_LMS_Counsellor\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { createContext, useState, useMemo, createElement, useContext, useCallback } from 'react';\nvar STORE_DEFAULT_NAME = '__STATE_MACHINE__';\nvar STORE_ACTION_NAME = '__STATE_MACHINE_ACTION_NAME__';\nvar STATE_MACHINE_DEBUG_NAME = '___STATE_MACHINE_DEBUG__';\n\nvar getBrowserStoreData = function getBrowserStoreData(storageType, storeName) {\n  var sessionStorageData = storageType.getItem(storeName);\n\n  try {\n    return sessionStorageData ? JSON.parse(sessionStorageData) : undefined;\n  } catch (_a) {\n    return undefined;\n  }\n};\n\nfunction storeFactory(storageType, name) {\n  var storeName = name || STORE_DEFAULT_NAME;\n  var store = getBrowserStoreData(storageType, storeName);\n\n  var getName = function getName() {\n    return storeName;\n  };\n\n  var set = function set(value) {\n    store = value;\n  };\n\n  var get = function get() {\n    return store;\n  };\n\n  return {\n    set: set,\n    get: get,\n    getName: getName\n  };\n}\n\nvar isUndefined = function isUndefined(val) {\n  return val === undefined;\n};\n\nfunction setUpDevTools(isDevMode, storageType, getName, getStore) {\n  if (typeof window === 'undefined' || !isDevMode) return; // @ts-ignore\n\n  window.STATE_MACHINE_DEBUG = function (value) {\n    return storageType.setItem(STATE_MACHINE_DEBUG_NAME, value);\n  }; // @ts-ignore\n\n\n  window.STATE_MACHINE_RESET = function () {\n    return storageType.clear();\n  }; // @ts-ignore\n\n\n  window.STATE_MACHINE_GET_STORE = function () {\n    return storageType.getItem(getName());\n  }; // @ts-ignore\n\n\n  window.STATE_MACHINE_SAVE_TO = function (name) {\n    return window.localStorage.setItem(name, JSON.stringify(getStore()));\n  }; // @ts-ignore\n\n\n  window.STATE_MACHINE_LOAD = function (_ref) {\n    var storeName = _ref.storeName,\n        data = _ref.data;\n    return storageType.setItem(getName() || STATE_MACHINE_DEBUG_NAME, data || window.localStorage.getItem(storeName) || '');\n  };\n}\n\nvar StateMachineContext = createContext({\n  store: {},\n  updateStore: function updateStore(payload) {\n    return payload;\n  }\n});\n\nvar transformStore = function transformStore(_ref2) {\n  var transform = _ref2.transform,\n      externalStoreName = _ref2.externalStoreName,\n      storageType = _ref2.storageType,\n      store = _ref2.store;\n  return transform({\n    externalStoreData: getBrowserStoreData(storageType, externalStoreName),\n    currentStoreData: store\n  });\n};\n\nfunction getSyncStoreData(defaultStoreData, options, storageType) {\n  var store = defaultStoreData;\n  var syncStoreOption = options.syncStores;\n  if (!syncStoreOption) return store;\n\n  try {\n    if (Array.isArray(syncStoreOption)) {\n      syncStoreOption.forEach(function (option) {\n        store = transformStore({\n          transform: option.transform,\n          externalStoreName: option.externalStoreName,\n          storageType: storageType,\n          store: store\n        });\n      });\n    } else if (syncStoreOption.externalStoreName && typeof syncStoreOption.transform === 'function' && typeof syncStoreOption.externalStoreName === 'string') {\n      return transformStore({\n        transform: syncStoreOption.transform,\n        externalStoreName: syncStoreOption.externalStoreName,\n        storageType: storageType,\n        store: store\n      });\n    } else {\n      Object.entries(syncStoreOption).forEach(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            key = _ref4[0],\n            values = _ref4[1];\n\n        var browserStore = getBrowserStoreData(storageType, key);\n        values.forEach(function (value) {\n          store = Object.assign(Object.assign({}, store), _defineProperty({}, value, Object.assign(Object.assign({}, store[value]), browserStore[value])));\n        });\n      });\n    }\n  } catch (_a) {\n    return store;\n  }\n\n  return store;\n}\n\nvar isClient = typeof window !== 'undefined';\nvar isDevMode = process.env.NODE_ENV !== 'production';\nvar storageType = isClient ? window.sessionStorage : {\n  getItem: function getItem(payload) {\n    return payload;\n  },\n  setItem: function setItem(payload) {\n    return payload;\n  },\n  clear: function clear() {},\n  length: 0,\n  key: function key(payload) {\n    return payload.toString();\n  },\n  removeItem: function removeItem() {}\n};\nvar getStore;\nvar setStore;\nvar getName;\nvar middleWaresArray = [];\n\nvar middleWare = function middleWare() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  if (data && isClient) {\n    // @ts-ignore\n    window[STORE_ACTION_NAME] = data;\n  }\n\n  return data;\n};\n\nfunction setStorageType(type) {\n  storageType = type;\n}\n\nfunction createStore(defaultStoreData) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    name: STORE_DEFAULT_NAME,\n    middleWares: [],\n    syncStores: undefined\n  };\n  var storeName = options ? options.name : STORE_DEFAULT_NAME;\n  var methods = storeFactory(storageType, storeName);\n\n  if (isDevMode && isClient) {\n    // @ts-ignore\n    window['STATE_MACHINE_NAME'] = storeName;\n  }\n\n  getName = methods.getName;\n  getStore = methods.get;\n  setStore = methods.set;\n  middleWaresArray = options.middleWares;\n  setUpDevTools(isDevMode, storageType, getName, getStore);\n  setStore(getSyncStoreData(getStore() || defaultStoreData, options, storageType));\n}\n\nfunction StateMachineProvider(props) {\n  var _useState = useState(getStore()),\n      _useState2 = _slicedToArray(_useState, 2),\n      globalState = _useState2[0],\n      updateStore = _useState2[1];\n\n  var value = useMemo(function () {\n    return {\n      store: globalState,\n      updateStore: updateStore\n    };\n  }, [globalState]); // @ts-ignore\n\n  return createElement(StateMachineContext.Provider, Object.assign({\n    value: value\n  }, props));\n}\n\nvar actionTemplate = function actionTemplate(_ref5) {\n  var options = _ref5.options,\n      callback = _ref5.callback,\n      updateStore = _ref5.updateStore;\n  return function (payload) {\n    var result;\n    var debugName = callback ? callback.name : '';\n\n    if (isDevMode) {\n      middleWare(debugName);\n    }\n\n    if (callback) {\n      result = callback(getStore(), payload);\n    }\n\n    setStore(isUndefined(result) ? getStore() : result);\n    storageType.setItem(getName(), JSON.stringify(getStore()));\n\n    if (isUndefined(options) || options && options.shouldReRenderApp !== false) {\n      var pipeData = getStore();\n\n      if (Array.isArray(middleWaresArray) && middleWaresArray.length) {\n        pipeData = middleWaresArray.reduce(function (currentValue, currentFunction) {\n          return currentFunction(currentValue) || currentValue;\n        }, pipeData);\n      }\n\n      updateStore(pipeData);\n    }\n  };\n};\n\nfunction useStateMachine(updateStoreFunction, options) {\n  var _useContext = useContext(StateMachineContext),\n      globalState = _useContext.store,\n      updateStore = _useContext.updateStore;\n\n  if (updateStoreFunction && Object.keys(updateStoreFunction).length) {\n    return {\n      actions: Object.entries(updateStoreFunction).reduce(function (previous, _ref6) {\n        var _ref7 = _slicedToArray(_ref6, 2),\n            key = _ref7[0],\n            callback = _ref7[1];\n\n        return Object.assign(Object.assign({}, previous), _defineProperty({}, key, useCallback(actionTemplate({\n          options: options,\n          callback: callback,\n          updateStore: updateStore\n        }), [])));\n      }, {}),\n      action: function action(p) {\n        return p;\n      },\n      state: globalState\n    };\n  }\n\n  return {\n    actions: {},\n    action: useCallback(updateStoreFunction ? actionTemplate({\n      options: options,\n      callback: updateStoreFunction,\n      updateStore: updateStore\n    }) : function () {}, []),\n    state: globalState\n  };\n}\n\nexport { StateMachineContext, StateMachineProvider, createStore, setStorageType, useStateMachine };","map":{"version":3,"sources":["C:/Users/ACTIVANTS/Desktop/LMS Councellor/Activants_LMS_Counsellor/ATIVANTS_LMS_COUNSELLOR/node_modules/little-state-machine/dist/little-state-machine.es.js"],"names":["createContext","useState","useMemo","createElement","useContext","useCallback","STORE_DEFAULT_NAME","STORE_ACTION_NAME","STATE_MACHINE_DEBUG_NAME","getBrowserStoreData","storageType","storeName","sessionStorageData","getItem","JSON","parse","undefined","_a","storeFactory","name","store","getName","set","value","get","isUndefined","val","setUpDevTools","isDevMode","getStore","window","STATE_MACHINE_DEBUG","setItem","STATE_MACHINE_RESET","clear","STATE_MACHINE_GET_STORE","STATE_MACHINE_SAVE_TO","localStorage","stringify","STATE_MACHINE_LOAD","data","StateMachineContext","updateStore","payload","transformStore","transform","externalStoreName","externalStoreData","currentStoreData","getSyncStoreData","defaultStoreData","options","syncStoreOption","syncStores","Array","isArray","forEach","option","Object","entries","key","values","browserStore","assign","isClient","process","env","NODE_ENV","sessionStorage","length","toString","removeItem","setStore","middleWaresArray","middleWare","setStorageType","type","createStore","middleWares","methods","StateMachineProvider","props","globalState","Provider","actionTemplate","callback","result","debugName","shouldReRenderApp","pipeData","reduce","currentValue","currentFunction","useStateMachine","updateStoreFunction","keys","actions","previous","action","p","state"],"mappings":"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","sourcesContent":["import { createContext, useState, useMemo, createElement, useContext, useCallback } from 'react';\n\nconst STORE_DEFAULT_NAME = '__STATE_MACHINE__';\r\nconst STORE_ACTION_NAME = '__STATE_MACHINE_ACTION_NAME__';\r\nconst STATE_MACHINE_DEBUG_NAME = '___STATE_MACHINE_DEBUG__';\n\nvar getBrowserStoreData = (storageType, storeName) => {\r\n    const sessionStorageData = storageType.getItem(storeName);\r\n    try {\r\n        return sessionStorageData ? JSON.parse(sessionStorageData) : undefined;\r\n    }\r\n    catch (_a) {\r\n        return undefined;\r\n    }\r\n};\n\nfunction storeFactory(storageType, name) {\r\n    const storeName = name || STORE_DEFAULT_NAME;\r\n    let store = getBrowserStoreData(storageType, storeName);\r\n    const getName = () => storeName;\r\n    const set = (value) => {\r\n        store = value;\r\n    };\r\n    const get = () => store;\r\n    return {\r\n        set,\r\n        get,\r\n        getName,\r\n    };\r\n}\n\nvar isUndefined = (val) => val === undefined;\n\nfunction setUpDevTools(isDevMode, storageType, getName, getStore) {\r\n    if (typeof window === 'undefined' || !isDevMode)\r\n        return;\r\n    // @ts-ignore\r\n    window.STATE_MACHINE_DEBUG = (value) => storageType.setItem(STATE_MACHINE_DEBUG_NAME, value);\r\n    // @ts-ignore\r\n    window.STATE_MACHINE_RESET = () => storageType.clear();\r\n    // @ts-ignore\r\n    window.STATE_MACHINE_GET_STORE = () => storageType.getItem(getName());\r\n    // @ts-ignore\r\n    window.STATE_MACHINE_SAVE_TO = name => window.localStorage.setItem(name, JSON.stringify(getStore()));\r\n    // @ts-ignore\r\n    window.STATE_MACHINE_LOAD = ({ storeName, data, }) => storageType.setItem(getName() || STATE_MACHINE_DEBUG_NAME, data || window.localStorage.getItem(storeName) || '');\r\n}\n\nvar StateMachineContext = createContext({\r\n    store: {},\r\n    updateStore: (payload) => payload,\r\n});\n\nvar transformStore = ({ transform, externalStoreName, storageType, store, }) => transform({\r\n    externalStoreData: getBrowserStoreData(storageType, externalStoreName),\r\n    currentStoreData: store,\r\n});\n\nfunction getSyncStoreData(defaultStoreData, options, storageType) {\r\n    let store = defaultStoreData;\r\n    const syncStoreOption = options.syncStores;\r\n    if (!syncStoreOption)\r\n        return store;\r\n    try {\r\n        if (Array.isArray(syncStoreOption)) {\r\n            syncStoreOption.forEach(option => {\r\n                store = transformStore({\r\n                    transform: option.transform,\r\n                    externalStoreName: option.externalStoreName,\r\n                    storageType,\r\n                    store,\r\n                });\r\n            });\r\n        }\r\n        else if (syncStoreOption.externalStoreName &&\r\n            typeof syncStoreOption.transform === 'function' &&\r\n            typeof syncStoreOption.externalStoreName === 'string') {\r\n            return transformStore({\r\n                transform: syncStoreOption.transform,\r\n                externalStoreName: syncStoreOption.externalStoreName,\r\n                storageType,\r\n                store,\r\n            });\r\n        }\r\n        else {\r\n            Object.entries(syncStoreOption).forEach(([key, values]) => {\r\n                const browserStore = getBrowserStoreData(storageType, key);\r\n                values.forEach((value) => {\r\n                    store = Object.assign(Object.assign({}, store), {\r\n                        [value]: Object.assign(Object.assign({}, store[value]), browserStore[value]),\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    }\r\n    catch (_a) {\r\n        return store;\r\n    }\r\n    return store;\r\n}\n\nconst isClient = typeof window !== 'undefined';\r\nconst isDevMode = process.env.NODE_ENV !== 'production';\r\nlet storageType = isClient\r\n    ? window.sessionStorage\r\n    : {\r\n        getItem: payload => payload,\r\n        setItem: (payload) => payload,\r\n        clear: () => { },\r\n        length: 0,\r\n        key: (payload) => payload.toString(),\r\n        removeItem: () => { },\r\n    };\r\nlet getStore;\r\nlet setStore;\r\nlet getName;\r\nlet middleWaresArray = [];\r\nconst middleWare = (data = '') => {\r\n    if (data && isClient) {\r\n        // @ts-ignore\r\n        window[STORE_ACTION_NAME] = data;\r\n    }\r\n    return data;\r\n};\r\nfunction setStorageType(type) {\r\n    storageType = type;\r\n}\r\nfunction createStore(defaultStoreData, options = {\r\n    name: STORE_DEFAULT_NAME,\r\n    middleWares: [],\r\n    syncStores: undefined,\r\n}) {\r\n    const storeName = options ? options.name : STORE_DEFAULT_NAME;\r\n    const methods = storeFactory(storageType, storeName);\r\n    if (isDevMode && isClient) {\r\n        // @ts-ignore\r\n        window['STATE_MACHINE_NAME'] = storeName;\r\n    }\r\n    getName = methods.getName;\r\n    getStore = methods.get;\r\n    setStore = methods.set;\r\n    middleWaresArray = options.middleWares;\r\n    setUpDevTools(isDevMode, storageType, getName, getStore);\r\n    setStore(getSyncStoreData(getStore() || defaultStoreData, options, storageType));\r\n}\r\nfunction StateMachineProvider(props) {\r\n    const [globalState, updateStore] = useState(getStore());\r\n    const value = useMemo(() => ({\r\n        store: globalState,\r\n        updateStore,\r\n    }), [globalState]);\r\n    // @ts-ignore\r\n    return createElement(StateMachineContext.Provider, Object.assign({ value: value }, props));\r\n}\r\nconst actionTemplate = ({ options, callback, updateStore, }) => (payload) => {\r\n    let result;\r\n    const debugName = callback ? callback.name : '';\r\n    if (isDevMode) {\r\n        middleWare(debugName);\r\n    }\r\n    if (callback) {\r\n        result = callback(getStore(), payload);\r\n    }\r\n    setStore(isUndefined(result) ? getStore() : result);\r\n    storageType.setItem(getName(), JSON.stringify(getStore()));\r\n    if (isUndefined(options) ||\r\n        (options && options.shouldReRenderApp !== false)) {\r\n        let pipeData = getStore();\r\n        if (Array.isArray(middleWaresArray) && middleWaresArray.length) {\r\n            pipeData = middleWaresArray.reduce((currentValue, currentFunction) => currentFunction(currentValue) || currentValue, pipeData);\r\n        }\r\n        updateStore(pipeData);\r\n    }\r\n};\r\nfunction useStateMachine(updateStoreFunction, options) {\r\n    const { store: globalState, updateStore } = useContext(StateMachineContext);\r\n    if (updateStoreFunction && Object.keys(updateStoreFunction).length) {\r\n        return {\r\n            actions: Object.entries(updateStoreFunction).reduce((previous, [key, callback]) => (Object.assign(Object.assign({}, previous), { [key]: useCallback(actionTemplate({\r\n                    options,\r\n                    callback,\r\n                    updateStore,\r\n                }), []) })), {}),\r\n            action: p => p,\r\n            state: globalState,\r\n        };\r\n    }\r\n    return {\r\n        actions: {},\r\n        action: useCallback(updateStoreFunction\r\n            ? actionTemplate({\r\n                options,\r\n                callback: updateStoreFunction,\r\n                updateStore,\r\n            })\r\n            : () => { }, []),\r\n        state: globalState,\r\n    };\r\n}\n\nexport { StateMachineContext, StateMachineProvider, createStore, setStorageType, useStateMachine };\n"]},"metadata":{},"sourceType":"module"}